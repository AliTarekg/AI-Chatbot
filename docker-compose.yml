version: '3.8'

services:
  # Ollama service for AI model hosting
  ollama:
    image: ollama/ollama:latest
    container_name: ai-chatbot-ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # AI Chatbot application
  chatbot:
    build: .
    container_name: ai-chatbot-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=llama3.2:3b
      - PORT=3000
      - LOG_LEVEL=info
    depends_on:
      ollama:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
      - chatbot_node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ai-chatbot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - chatbot
    restart: unless-stopped
    profiles:
      - with-nginx

  # Redis for caching (optional)
  redis:
    image: redis:alpine
    container_name: ai-chatbot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles:
      - with-cache

volumes:
  ollama_data:
    driver: local
  redis_data:
    driver: local
  chatbot_node_modules:
    driver: local

networks:
  default:
    name: ai-chatbot-network
